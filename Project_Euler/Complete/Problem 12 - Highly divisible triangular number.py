# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

import math
import time

def factor(n):
    x = 1
    factors = []
    while(n>=x):
        if(n%x==0):
            factors.append(x)
        x += 1
    return factors

def prime_factor(n):
    a = []
    while n%2 == 0:
        a.append(2)
        n/=2
    f=3
    while f * f <= n:
        if (n % f == 0):
            a.append(f)
            n /= f
        else:
            f += 2
    if(n!=1)\
            : a.append(n)
    #Only odd number is possible
    return a

def determine_num_factors(n):
    counter = 1
    p_factors = prime_factor(n)

    while(p_factors):
        curr_element = p_factors[0]
        counter *= (p_factors.count(curr_element)+1)
        p_factors = list(filter(lambda a: a != curr_element, p_factors))
    return counter

def find_triangle(number):
    return(sum(x for x in range(1,number+1)))

start_time = time.time()


# #########WRONG################
# x=1
# y = True
# while(y==True):
#     curr_tri = (find_triangle(x))
#     num_factors = determine_num_factors(x)
#     print(num_factors)
#     if(num_factors>500):
#         break
#     x += 1

#########RIGHT###############
x=1
y = True
curr_tri = 0
while(y==True):
    curr_tri += x
    num_factors = determine_num_factors(curr_tri)
    if(num_factors>500):
        break
    x += 1


#
print("triangle number: ", x, )
print("value of triangle number: ", curr_tri)

print("RUN TIME : ", time.time()-start_time)